## 竞赛任务总体概述

这是一个关于**江南古典园林美学特征量化建模**的竞赛，需要用数学方法分析十个代表性园林的三个美学特征：

### 核心任务：建立三个数学模型

**问题1：趣味性建模** - 量化"移步异景"的游赏体验
**问题2：幻境感建模** - 量化"小中见大"的空间布局效果

**问题3：相似度建模** - 找出"有法无式"背后的共性规律

---

## 各个问题的具体任务和数据使用

### 问题1："移步异景"的游赏"趣味性"建模

**要解决的核心问题：**

- 如何量化园林游览路径的"趣味性"
- 路径越蜿蜒曲折，视角变化越频繁，趣味性越高

**需要完成的三个子任务：**

**1) 路径刻画：**

- **用什么数据：** Excel坐标数据 + 平面矢量图
- **要做什么：** 设计从入口到出口的游览路径，计算路径长度、转折点数量、交叉点数量
- **数据用法：**
    - 用道路坐标数据规划可行走路径
    - 用建筑坐标判断哪些区域可通行
    - 将路径问题转化为图论问题

**2) 异景程度：**

- **用什么数据：** 所有景观元素坐标 + 照片
- **要做什么：** 计算沿路径移动时景观元素的变化频率
- **数据用法：**
    - 分析路径上每个位置能看到的山石、水景、植物、建筑
    - 计算景观变化的频率和幅度
    - 用照片验证不同位置的视觉效果

**3) 游线规划：**

- **用什么数据：** 平面图 + 分析结果
- **要做什么：** 设计最优游览路线，可视化展示十个园林的游园路线
- **数据用法：** 综合路径和异景分析，在平面图上标注推荐游线

### 问题2："小中见大"的布局"幻境感"建模

**要解决的核心问题：**

- 如何在有限空间营造"大空间"的错觉
- 通过不同主题区域和"开合"变化创造幻境感

**需要完成的三个子任务：**

**1) 元素分布：**

- **用什么数据：** 各类景观元素坐标数据
- **要做什么：** 分析山石、水景、植物、建筑的分布特征
- **数据用法：**
    - 计算各类元素的面积比例、密度分布
    - 分析元素的空间聚集程度和离散程度
    - 用数学指标描述空间布局特征

**2) 开合变化：**

- **用什么数据：** 平面图 + 照片 + 坐标数据
- **要做什么：** 定义并量化"开阔"与"围合"空间
- **数据用法：**
    - 根据水体面积、植物密度等判断空间的开阔度
    - 用建筑围合程度判断空间的封闭感
    - 分析从围合空间到开阔空间的转换

**3) 幻境评分：**

- **用什么数据：** 前两步的分析结果
- **要做什么：** 以寄畅园为100分标准，给其他9个园林打分排序
- **数据用法：** 建立评分模型，输出表格形式的排序结果

### 问题3："有法无式"的园林"相似度"建模

**要解决的核心问题：**

- 找出看似不规则的园林背后的共性规律
- 建立相似度计算方法

**需要完成的三个子任务：**

**1) 相似度计算：**

- **用什么数据：** 问题1和问题2的建模结果
- **要做什么：** 提取园林特征向量，计算园林间相似度
- **数据用法：** 将趣味性和幻境感指标转化为特征向量

**2) 模型验证：**

- **用什么数据：** 附件11中的其他园林平面图
- **要做什么：** 在新园林上测试模型的有效性
- **数据用法：** 选择1-2个新园林，应用建立的模型进行验证

**3) 扩展讨论：**

- **要做什么：** 讨论是否还有其他重要美学特征
- **数据用法：** 基于分析发现提出新的特征维度

---

## 数据文件的具体用途

**Excel坐标数据：**

- 提供6类景观元素的精确坐标
- 用于计算面积、距离、密度等几何特征
- 支持路径规划和空间分析

**平面图(JPG)：**

- 提供园林整体布局概览
- 用于游线规划的可视化展示
- 验证数据分析结果的合理性

**矢量图(DWG/PDF)：**

- 提供精确的边界信息
- 用于详细的几何计算
- 支持专业的空间分析

**照片：**

- 提供真实的视觉效果参考
- 验证"移步异景"的分析结果
- 辅助理解空间的开合变化

这个竞赛的核心是将传统园林的感性美学体验转化为可计算的数学指标，建立客观的评价和比较体系。

## 数据格式解读

### 假山数据示例分析

**左列（按线段分组）：**

```
{0;0}                               ← 第0条假山线段开始
0. {166502.923936, 75271.984707, 0} ← 第0条线段的第0个点
1. {167139.982548, 75909.496411, 0} ← 第0条线段的第1个点
...
{0;1}                               ← 第1条假山线段开始
0. {-7687.928839, 109929.275227, 0} ← 第1条线段的第0个点

```

**右列（所有点的简单列表）：**

```
{166502.923936, 75271.984707, 0}    ← 直接列出所有假山边界点
{167139.982548, 75909.496411, 0}
{167607.075526, 76524.424191, 0}

```

### 左列：按线段分组的坐标数据

**数据格式含义：**

```
{0;0}                                 ← 线段标识符：第0条线段
0. {162816.907518, 65311.860745, 0}   ← 第0条线段的第0个点

{0;1}                                 ← 线段标识符：第1条线段
0. {164874.099396, 59649.074297, 0}   ← 第1条线段的第0个点

{0;2}                                 ← 线段标识符：第2条线段
0. {171079.830183, 59567.969176, 0}   ← 第2条线段的第0个点

```

**形象理解：**
想象你在画一个建筑的边界，这个建筑可能是个复杂形状，由多段线条组成：

- **第0条线段**：可能是建筑的南墙，只有1个采样点
- **第1条线段**：可能是建筑的东墙，只有1个采样点
- **第2条线段**：可能是建筑的北墙，只有1个采样点

### 右列：所有点的简单列表

```
{162816.907518, 65311.860745, 0}     ← 就是左列所有坐标点的合集
{164874.099396, 59649.074297, 0}     ← 不管属于哪条线段
{171079.830183, 59567.969176, 0}     ← 直接列出来

```

## 坐标含义详解

**每个坐标 {x, y, z} 的含义：**

- **x = 162816.907518**：距离原点（拙政园西南角）向东162.8米
- **y = 65311.860745**：距离原点向北65.3米
- **z = 0**：高度，统一为0（平面图）

## 为什么会有这种数据格式？

### 1. 按线段分组的用途

```python
# 可以计算每条墙体的长度
第0条墙长度 = 计算第0条线段所有点连成的总长度
第1条墙长度 = 计算第1条线段所有点连成的总长度

# 可以分析建筑的复杂程度
建筑复杂度 = 线段数量（{0;0}, {0;1}, {0;2}...的数量）

```

### 2. 不分线段列表的用途

```python
# 直接计算整个建筑的面积
建筑面积 = 用所有坐标点围成的多边形面积

# 计算建筑的边界盒
最小x = min(所有x坐标)
最大x = max(所有x坐标)
建筑宽度 = 最大x - 最小x

```

## 实际应用举例

### 在问题1中的应用（路径规划）：

```python
# 实体建筑是不能穿越的障碍物
for 每个建筑坐标点:
    在路径规划时标记为"禁止通行区域"

# 计算建筑密度影响趣味性
建筑密集区域 = 视角变化更频繁 = 趣味性更高

```

### 在问题2中的应用（开合变化）：

```python
# 建筑围合度计算
if 某区域建筑坐标点密集:
    该区域属于"围合空间"

if 某区域建筑坐标点稀疏:
    该区域属于"开阔空间"

```

## 数据异常现象

从你的数据看，每条线段只有1个点，这可能是因为：

1. **采样间距太大**：1米间距下，短墙体可能只有1个采样点
2. **建筑形状简单**：可能是方形建筑，每面墙都很短
3. **数据简化**：为了便于处理，只保留了关键拐点

## 完整理解框架

把这些坐标想象成：

1. **GPS定位点**：每个坐标就是建筑边界上的一个精确位置
2. **连线成形**：这些点按顺序连接，就画出了建筑的轮廓
3. **数字化园林**：整个园林的所有元素都这样数字化了

这样你就能用计算机精确分析园林的每一个细节，而不是靠主观感受了。

### 植物数据示例分析

```
中心坐标: {-20842.87661, 127199.955261, 0}  半径: 2068.217966mm
中心坐标: {-21246.780832, 123829.127665, 0} 半径: 1512.632853mm

```

每棵植物就是一个圆：圆心 + 半径

## 坐标系统理解

- **原点(0,0)：** 拙政园西南角边界顶点
- **X轴：** 向正东方向（向右）
- **Y轴：** 向正北方向（向上）
- **单位：** 毫米(mm)
- **负值含义：** 表示在原点西边或南边

从你的数据可以看出，有些假山坐标是负值（如-7687.928839），说明这些假山位于原点西边。

## 在三个问题中的具体应用

### 问题1：趣味性建模（移步异景）

**1) 路径刻画：**

```python
# 使用道路工作表数据规划游览路径
道路坐标 → 生成可行走区域图 → 设计从入口到出口的路径
计算指标：
- 路径总长度 = sqrt((x2-x1)² + (y2-y1)²) 累加
- 转折点数量 = 路径方向改变的次数
- 交叉点数量 = 路径与其他路径的交汇点

```

**2) 异景程度：**

```python
# 沿路径分析景观变化
在路径上每个位置计算：
- 可见假山数量和面积（用假山坐标数据）
- 可见水体面积（用水体坐标数据）
- 可见植物数量（用植物中心和半径数据）
- 景观变化率 = 相邻位置景观差异程度

```

### 问题2：幻境感建模（小中见大）

**1) 元素分布：**

```python
# 计算各类元素的空间特征
假山分布密度 = 假山总面积 / 园林总面积
水体开阔度 = 最大连续水面面积
植物聚集度 = 使用植物坐标计算聚类程度
建筑围合度 = 分析建筑形成的封闭空间

```

**2) 开合变化：**

```python
# 定义开阔与围合标准
开阔空间判断：
- 水体面积占比 > 60%
- 植物密度 < 0.3个/平方米
- 视线通透度高

围合空间判断：
- 建筑包围程度 > 70%
- 植物密度 > 0.8个/平方米
- 路径宽度 < 3米

```

### 问题3：相似度建模

**特征向量提取：**

```python
# 将坐标数据转化为数值特征
园林特征 = [
    假山总面积/园林面积,
    水体总面积/园林面积,
    植物平均密度,
    路径总长度/园林面积,
    建筑覆盖率,
    路径蜿蜒度（转折点密度）,
    空间开合变化次数,
    ...
]

```

## 数据处理建议

### 坐标转换

```python
# 毫米转米
x_meter = x_mm / 1000
y_meter = y_mm / 1000

# 处理负坐标（正常现象，表示在原点西南方向）
所有坐标 + 偏移量 → 确保所有坐标为正值（便于计算）

```

### 面积计算

```python
# 假山面积：用坐标点围成的多边形面积
# 植物面积：π × 半径²
# 水体面积：用坐标点围成的多边形面积

```

### 距离计算

```python
# 两点距离：sqrt((x2-x1)² + (y2-y1)²)
# 路径长度：相邻点距离累加

```

这些数据本质上就是把园林的平面图数字化了，让你可以进行精确的几何计算和空间分析。每种景观元素都有精确的位置和大小信息，这样你就能用数学方法量化"美学感受"了。
